// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Rating {
  ONE
  ONE_HALF
  TWO
  TWO_HALF
  THREE
  THREE_HALF
  FOUR
  FOUR_HALF
  FIVE
}

enum BookStatus {
  READING
  READ
  TO_READ
}

model User {
  id         String     @id @default(uuid())
  username   String     @db.VarChar(50)
  email      String     @unique @db.VarChar(255)
  password   String
  role       Role       @default(USER)
  created_on DateTime   @default(now())
  deleted_at DateTime?
  updated_at DateTime   @updatedAt
  UserBook   UserBook[]

  BookSummary BookSummary[]
  BookReview  BookReview[]
}

model Book {
  id              String        @id @default(uuid())
  title           String        @db.VarChar(255)
  author          String        @db.VarChar(255)
  created_at      DateTime      @default(now())
  deleted_at      DateTime?
  updated_at      DateTime      @updatedAt
  categoryId      String
  subCategoryId   String?
  mainCategory    BookCategory  @relation("MainCategory", fields: [categoryId], references: [id])
  subCategory     BookCategory? @relation("SubCategory", fields: [subCategoryId], references: [id])
  UserBook        UserBook[]
  BookSummary     BookSummary[]
  BookReview      BookReview[]

  @@unique([title, author])
  @@index([categoryId])
  @@index([subCategoryId]) 

}

model UserBook {
  id                 String     @id @default(uuid())
  user_id            String
  user               User       @relation(fields: [user_id], references: [id])
  book_id            String
  book               Book       @relation(fields: [book_id], references: [id])
  rating             Rating?
  status             BookStatus
  begin_at           DateTime
  finished_at        DateTime
  total_number_pages Int
  created_at         DateTime   @default(now())
  deleted_at         DateTime?
  updated_at         DateTime   @updatedAt
  obs                String?

  @@unique([user_id, book_id])
}

model BookReview {
  id      String @id @default(uuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])
  book_id String
  book    Book   @relation(fields: [book_id], references: [id])
  review  String

  @@unique([user_id, book_id])
}

model BookSummary {
  id         String    @id @default(uuid())
  content    String    @db.Text
  user_id    String
  user       User      @relation(fields: [user_id], references: [id])
  book_id    String
  book       Book      @relation(fields: [book_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@unique([user_id, book_id])
}

model BookCategory {
  id            String  @id @default(uuid())
  category_name String  @unique
  mainBooks     Book[]  @relation("MainCategory")
  subBooks      Book[]  @relation("SubCategory")
}
